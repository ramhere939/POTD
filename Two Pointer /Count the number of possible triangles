countTriangles function finds the number of valid triangles that can be formed using the elements of the given array. 🔺✨  

Problem Understanding 🧐  
- Input: An integer array arr representing side lengths.  
- Output: Return the number of valid triangles that can be formed.  
- Constraints:  
  ✅ Each triangle must satisfy the condition that the sum of any two sides is greater than the third side.  
  ✅ The array is unsorted initially.  
- Edge Cases:  
  🔹 No valid triangles can be formed.  
  🔹 All elements in the array are the same.  
  🔹 The array has fewer than three elements.  

Approach 🚀  

1️⃣ **Sorting & Two-Pointer Technique**  
   - Sort the array to simplify checking the triangle inequality.  
   - Iterate from the largest element (acting as the longest side).  
   - Use two pointers (j and k) to check if the sum of two smaller sides is greater than the longest side.  
   - If valid, all pairs between j and k form triangles, so add (k - j) to the count and decrement k.  
   - If not valid, increment j to find a larger sum.  

2️⃣ **Time & Space Complexity**  
   ⏳ Time Complexity: O(n²) due to the nested loop.  
   💾 Space Complexity: O(1), as sorting is done in place.  

Code Implementation 💻  
```java
static int countTriangles(int arr[]) {
    Arrays.sort(arr);
    int n = arr.length, ans = 0;
    for (int i = n - 1; i >= 2; i--) {
        int j = 0, k = i - 1;
        while (j < k) {
            if (arr[j] + arr[k] > arr[i]) {
                ans += k - j;
                k--;
            } else {
                j++;
            }
        }
    }
    return ans;
}
```
